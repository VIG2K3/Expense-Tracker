from customtkinter import *
import sqlite3
import datetime
from tkinter import *
from tkcalendar import DateEntry
import tkinter.messagebox as mb
from tkinter import ttk

# Connecting to the Database
connector = sqlite3.connect("Expense Tracker CTk.db")
cursor = connector.cursor()

cursor.execute(
    'CREATE TABLE IF NOT EXISTS ExpenseTracker (ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, Date DATETIME, '
    'Payee TEXT, Note TEXT, Amount FLOAT, ModeOfPayment TEXT, Category TEXT)'
)
connector.commit()

money_app = CTk()
money_app.resizable(True, True)
money_app.geometry("1920x1080")
money_app.title("Expense Tracker")

set_appearance_mode("light")

# Backgrounds and Fonts
data_entry_frame_bg = 'Red'
buttons_frame_bg = 'Tomato'
hlb_btn_bg = 'IndianRed'
lbl_font = ('Georgia', 13)
entry_font = 'Times 13 bold'
btn_font = ('Gill Sans MT', 13)


# Functions

def exphover(a):
    addexpbut.configure(fg_color="#6500C3")


def expnothover(a):
    addexpbut.configure(fg_color='#7d57f8')


def inchover(a):
    addincbut.configure(fg_color="#6500C3")


def incnothover(a):
    addincbut.configure(fg_color="#7d57f8")


def addexp_frame():
    mainframe1.pack_forget()
    mainframe2.pack(fill='both', expand='true')


def home_frame():
    mainframe2.pack_forget()
    mainframe1.pack()


# Main Frame (Home)
mainframe1 = CTkFrame(master=money_app, fg_color="#000000", height=1920, width=1080)
mainframe1.pack(fill='both')

# Frame 1 (invisible)

frame_1 = CTkFrame(master=mainframe1, fg_color="#000000", height=250)
frame_1.pack(fill='x', padx=2, pady=2)

frame_1_1 = CTkFrame(master=frame_1, fg_color="#FFFFFF", height=250)
frame_1_1.pack(fill='x')

welclabel = CTkLabel(master=frame_1_1, text='Welcome, User', font=('Arial', 15))
welclabel.place(relx=0.025, rely=0.07)

Balancecounter = CTkLabel(master=frame_1_1, text='Balance', font=('Arial', 20), corner_radius=20)
Balancecounter.place(anchor='center', relx=0.5, rely=0.20)

moneycounter = CTkLabel(master=frame_1_1, text=f'RM XXXX.XX', text_color='#FFFFFF', fg_color='#000000', width=400,
                        height=50, font=('Arial', 15), corner_radius=20)
moneycounter.place(anchor='center', relx=0.5, rely=0.5)

# Frame 2 (invisible)

frame_2 = CTkFrame(master=mainframe1, fg_color="#000000", height=300)
frame_2.pack(fill='x', padx=2, pady=2)

# Left Frame in Frame 2

frame_2_1 = CTkFrame(master=frame_2, fg_color="#FFFFFF", height=200, width=970, border_width=2)
frame_2_1.pack(side='left')

addexpbut = CTkButton(master=frame_2_1, text='Add Expense', height=50, font=('Arial', 15), command=addexp_frame,
                      hover_color="#808080", fg_color="#000000")
addexpbut.place(anchor='center', relx=0.3, rely=0.5)
addincbut = CTkButton(master=frame_2_1, text='Add Income', height=50, font=('Arial', 15),
                      hover_color="#808080", fg_color="#000000")
addincbut.place(anchor='center', relx=0.7, rely=0.5)

# Right Frame in Frame 2

frame_2_2 = CTkFrame(master=frame_2, fg_color="#FFFFFF", height=200, width=970, border_width=2)
frame_2_2.pack(side='right')

Balancecounter = CTkLabel(master=frame_2_2, text='Set A Budget', font=('Arial', 20), corner_radius=20, )
Balancecounter.place(relx=0.05, rely=0.07)

setbudget = CTkEntry(master=frame_2_2, height=50, width=150, font=('Arial', 15), corner_radius=20)
setbudget.place(relx=0.1, rely=0.3)

budget_button = CTkButton(master=frame_2_2, text='Save', corner_radius=20, hover_color="#808080", fg_color="#000000")
budget_button.place(relx=0.5, rely=0.4)

# Frame 3_1

frame_3_1 = CTkFrame(master=mainframe1, fg_color="#FFFFFF", width=970, height=650, border_width=2)
frame_3_1.pack(side='left')

# Treeview Frame (Homepage)
table = ttk.Treeview(frame_3_1, selectmode=BROWSE,
                     columns=('ID', 'Date', 'Payee', 'Note', 'Amount', 'Mode of Payment', 'Category'))

X_Scroller = Scrollbar(table, orient=HORIZONTAL, command=table.xview)
Y_Scroller = Scrollbar(table, orient=VERTICAL, command=table.yview)
X_Scroller.pack(side=BOTTOM, fill=X)
Y_Scroller.pack(side=RIGHT, fill=Y)

table.config(yscrollcommand=Y_Scroller.set, xscrollcommand=X_Scroller.set)

table.heading('ID', text='S No.', anchor=CENTER)
table.heading('Date', text='Date', anchor=CENTER)
table.heading('Payee', text='Payee', anchor=CENTER)
table.heading('Note', text='Note', anchor=CENTER)
table.heading('Amount', text='Amount', anchor=CENTER)
table.heading('Mode of Payment', text='Mode of Payment', anchor=CENTER)
table.heading('Category', text='Category', anchor=CENTER)

table.column('#0', width=0, stretch=NO)
table.column('#1', width=50, stretch=NO)
table.column('#2', width=95, stretch=NO)  # Date column
table.column('#3', width=150, stretch=NO)  # Payee column
table.column('#4', width=255, stretch=NO)  # Title column
table.column('#5', width=135, stretch=NO)  # Amount column
table.column('#6', width=105, stretch=NO)  # Mode of Payment column
table.column('#7', width=105, stretch=NO)  # Category column

table.place(relx=0, y=0, relheight=1, relwidth=1)

# Button Binds
addexpbut.bind('<Enter>', exphover)
addexpbut.bind('<Leave>', expnothover)
addincbut.bind('<Enter>', inchover)
addincbut.bind('<Leave>', incnothover)


# Functions for 'Add Expenses' menu

def list_all_expenses():
    global connector, table

    table.delete(*table.get_children())

    all_data = connector.execute('SELECT * FROM ExpenseTracker')
    data = all_data.fetchall()

    for values in data:
        table.insert('', END, values=values)


def selected_expense_to_words():
    global table

    if not table.selection():
        mb.showerror('No expense selected!',
                     'Please select an expense from the table for us to read')
        return

    current_selected_expense = table.item(table.focus())
    values = current_selected_expense['values']

    message = (f'Your expense can be read like: \n"You paid {values[4]} to {values[2]} '
               f'for {values[3]} on {values[1]} via {values[5]} on{values[6]}"')

    mb.showinfo('Here\'s how to read your expense', message)


def remove_expense():
    if not table.selection():
        mb.showerror('No record selected!', 'Please select a record to delete!')
        return

    current_selected_expense = table.item(table.focus())
    values_selected = current_selected_expense['values']

    surety = mb.askyesno('Are you sure?',
                         f'Are you sure that you want to delete the record of {values_selected[2]}')

    if surety:
        connector.execute('DELETE FROM ExpenseTracker WHERE ID=%d' % values_selected[0])
        connector.commit()

        list_all_expenses()
        mb.showinfo('Record deleted successfully!',
                    'The record you wanted to delete has been deleted successfully')


def remove_all_expenses():
    surety = mb.askyesno('Are you sure?',
                         "Are you sure that you want to delete all the expense items from the database?",
                         icon='warning')

    if surety:
        table.delete(*table.get_children())

        connector.execute('DELETE FROM ExpenseTracker')
        connector.commit()

        clear_fields()
        list_all_expenses()
        mb.showinfo('All Expenses deleted', 'All the expenses were successfully deleted')
    else:
        mb.showinfo('Ok then', 'The task was aborted and no expense was deleted!')


# noinspection PyGlobalUndefined
def clear_fields():
    global note, payee, amnt, MoP, date, table, cate

    today_date = datetime.datetime.now().date()

    note.set('')
    payee.set('')
    amnt.set(0.0)
    MoP.set('Select Method'), cate.set('Select Method'), date.set_date(today_date)
    table.selection_remove(*table.selection())


def adding_expense():
    global date, payee, note, amnt, MoP, cate
    global connector

    if not date.get() or not payee.get() or not note.get() or not amnt.get() or not MoP.get() or not cate.get():
        mb.showerror('Fields empty!',
                     "Please fill all the missing fields before pressing the add button!")
    else:
        connector.execute('INSERT INTO ExpenseTracker (Date, Payee, Note, Amount, ModeOfPayment, Category) '
                          'VALUES (?,?,?,?,?,?)', (date.get_date(), payee.get(), note.get(),
                                                   amnt.get(), MoP.get(), cate.get()))
        connector.commit()

        clear_fields()
        list_all_expenses()
        mb.showinfo('Expense added',
                    'The expense whose details you just entered has been added to the database')


def edit_expense():
    global table

    # noinspection PyGlobalUndefined
    def edit_existing_expense():
        global date, amnt, note, payee, MoP, cate
        global connector, table

        current_selected_expense = table.item(table.focus())
        contents = current_selected_expense['values']

        connector.execute(
            'UPDATE ExpenseTracker SET Date = ?, Payee = ?, Description = ?, Amount = ?, ModeOfPayment = ?, '
            'Category = ï¼ŸWHERE ID= ?',
            (date.get_date(), payee.get(), note.get(), amnt.get(), MoP.get(), cate.get(), contents[0]))
        connector.commit()

        clear_fields()
        list_all_expenses()

        mb.showinfo('Data edited',
                    'We have updated the data and stored in the database as you wanted')
        edit_btn.destroy()
        return

    if not table.selection():
        mb.showerror('No expense selected!',
                     'You have not selected any expense in the table for us to edit; please do that!')
        return

    edit_btn = Button(master=frame_5, text='Edit expense', font=btn_font, width=30,
                      bg=hlb_btn_bg, command=edit_existing_expense)
    edit_btn.place(x=10, y=395)


# Main Frame (Add Expense)
mainframe2 = CTkFrame(master=money_app, fg_color="#ebebeb", height=1920, width=1080)
mainframe2.pack()

# StringVar and DoubleVar variables (Add Expense)
note = StringVar()
amnt = DoubleVar()
payee = StringVar()
MoP = StringVar(value='Select Method')
cate = StringVar(value='Select Method')

# Frame 5
frame_5 = CTkFrame(master=mainframe2, fg_color="#FFFFFF", height=250)
frame_5.pack(fill='x', padx=2, pady=2)

# New Expense heading
heading = CTkLabel(master=frame_5, text='NEW EXPENSE', fg_color="#FFFFFF", font=('Arial', 23), corner_radius=30)
heading.place(relx=0.50, rely=0.20, anchor='center')


# Add New Expense

def clear_addexp_entry(event):
    if addexp_entry.get() == '0.0':
        addexp_entry.delete(0, 'end')


def reset_addexp_entry(event):
    if addexp_entry.get() == '':
        addexp_entry.insert(0, 0.0)


addexp_entry = CTkEntry(master=frame_5, fg_color="#FFFFFF", width=400, height=50,
                        corner_radius=10, justify="center", textvariable=amnt)
addexp_entry.place(relx=0.40, rely=0.30)
addexp_entry.insert(0, '')
addexp_entry.bind('<FocusIn>', clear_addexp_entry)
addexp_entry.bind('<FocusOut>', reset_addexp_entry)

# Button in Frame 5
save_button = CTkButton(master=frame_5, text='Save', command=adding_expense, width=200, height=50,
                        corner_radius=5, hover_color="#808080", fg_color="#000000")
save_button.place(relx=0.75, rely=0.30)

homepage_button = CTkButton(master=frame_5, command=home_frame, text='Back to Home Page', width=200, height=50,
                            corner_radius=5, hover_color="#808080", fg_color="#000000")
homepage_button.place(relx=0.0, rely=0.0)

delexp_button = CTkButton(master=frame_5, text='Delete Expense', command=remove_expense, width=200, height=50,
                          hover_color="#808080", fg_color="#000000")
delexp_button.place(relx=0.75, rely=0.70)

selexp_button = CTkButton(master=frame_5, text='Edit Selected Expense', command=edit_expense, width=200, height=50,
                          hover_color="#808080", fg_color="#000000")
selexp_button.place(relx=0.45, rely=0.70)

senexp_button = CTkButton(master=frame_5, text='Convert Expense to a sentence', command=selected_expense_to_words,
                          width=200, height=50, hover_color="#808080", fg_color="#000000")
senexp_button.place(relx=0.15, rely=0.70)

# Frame6_1
frame_6_1 = CTkFrame(master=mainframe2, fg_color="#FFFFFF", height=970, width=970, border_width=2)
frame_6_1.pack(side='left')

Date = CTkLabel(master=frame_6_1, text='Date (M/DD/YY):')
Date.place(x=10, y=50)

date = DateEntry(master=frame_6_1, date=datetime.datetime.now().date(), font=entry_font)
date.place(x=160, y=50)

Payee_Label = CTkLabel(master=frame_6_1, text='Payee\t : ')
Payee_Label.place(x=10, y=230)

Payee_Entry = CTkEntry(master=frame_6_1, textvariable=payee)
Payee_Entry.place(x=10, y=260)

Note_Label = CTkLabel(frame_6_1, text='Note  :').place(x=10, y=130)
Note_Entry = CTkEntry(frame_6_1, textvariable=note, width=200, height=100).place(x=50, y=130)

Label(master=frame_6_1, text='Mode of Payment:').place(x=10, y=310)
dd1 = OptionMenu(frame_6_1, MoP,
                 *['Cash', 'Cheque', 'Credit Card', 'Debit Card', 'Google Pay',
                   'E-Wallet'])
dd1.place(x=160, y=305)
dd1.configure(width=10, font=entry_font)

Label(master=frame_6_1, text='Category:').place(x=10, y=350)
category = OptionMenu(frame_6_1, cate,
                      *['Automotive', 'Grocery', 'Hobby', 'Utility'])
category.place(x=160, y=355)
category.configure(width=10, font=entry_font)

# Frame6_2 (Expense Table)
frame_6_2 = CTkFrame(master=mainframe2, fg_color="#FFFFFF", height=970, width=970, border_width=2)
frame_6_2.pack(side='right')

table = ttk.Treeview(frame_6_2, selectmode=BROWSE,
                     columns=('ID', 'Date', 'Payee', 'Note', 'Amount', 'Mode of Payment', 'Category'))

X_Scroller = Scrollbar(table, orient=HORIZONTAL, command=table.xview)
Y_Scroller = Scrollbar(table, orient=VERTICAL, command=table.yview)
X_Scroller.pack(side=BOTTOM, fill=X)
Y_Scroller.pack(side=RIGHT, fill=Y)

table.config(yscrollcommand=Y_Scroller.set, xscrollcommand=X_Scroller.set)

table.heading('ID', text='S No.', anchor=CENTER)
table.heading('Date', text='Date', anchor=CENTER)
table.heading('Payee', text='Payee', anchor=CENTER)
table.heading('Note', text='Note', anchor=CENTER)
table.heading('Amount', text='Amount', anchor=CENTER)
table.heading('Mode of Payment', text='Mode of Payment', anchor=CENTER)
table.heading('Category', text='Category', anchor=CENTER)

table.column('#0', width=0, stretch=NO)
table.column('#1', width=50, stretch=NO)
table.column('#2', width=95, stretch=NO)  # Date column
table.column('#3', width=150, stretch=NO)  # Payee column
table.column('#4', width=255, stretch=NO)  # Title column
table.column('#5', width=135, stretch=NO)  # Amount column
table.column('#6', width=105, stretch=NO)  # Mode of Payment column
table.column('#7', width=105, stretch=NO)  # Category column

table.place(relx=0, y=0, relheight=1, relwidth=1)

list_all_expenses()

# Button Binds
addexpbut.bind('<Enter>', exphover)
addexpbut.bind('<Leave>', expnothover)
addincbut.bind('<Enter>', inchover)
addincbut.bind('<Leave>', incnothover)

# Let Home Menu appear first
mainframe2.pack_forget()

money_app.mainloop()
